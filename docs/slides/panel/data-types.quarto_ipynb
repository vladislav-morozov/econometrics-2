{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Data Types\"\n",
        "subtitle: \"A Brief Classification\"\n",
        "author: Vladislav Morozov  \n",
        "format:\n",
        "  revealjs:\n",
        "    width: 1150\n",
        "    slide-number: true\n",
        "    sc-sb-title: true\n",
        "    incremental: true   \n",
        "    logo: ../../themes/favicon.ico\n",
        "    footer: \"Classification of Data Types\"\n",
        "    footer-logo-link: \"https://vladislav-morozov.github.io/econometrics-2/\"\n",
        "    theme: ../../themes/slides_theme.scss\n",
        "    toc: TRUE\n",
        "    toc-depth: 2\n",
        "    toc-title: Contents\n",
        "    transition: convex\n",
        "    transition-speed: fast\n",
        "slide-level: 4\n",
        "title-slide-attributes:\n",
        "    data-background-color: \"#045D5D\"\n",
        "    data-footer: \" \"\n",
        "filters:\n",
        "  - reveal-header  \n",
        "include-in-header: ../../themes/mathjax.html \n",
        "highlight-style: tango\n",
        "---\n",
        "\n",
        "\n",
        "## Introduction {background=\"#00100F\"}\n",
        "  \n",
        "### Lecture Info {background=\"#43464B\" visibility=\"uncounted\"}\n",
        "\n",
        "\n",
        "#### Learning Outcomes\n",
        "\n",
        "This lecture offers a brief classification of data types\n",
        "\n",
        "\n",
        "<br>\n",
        "\n",
        "By the end, you should be able to\n",
        "\n",
        "- State the main ways to we classify data\n",
        "- Describe the four main kinds data in terms of observations\n",
        "  \n",
        "#### Textbook References\n",
        " \n",
        "\n",
        "::: {.nonincremental}\n",
        "\n",
        "\n",
        "- Section 1.3 in @Wooldridge2020IntroductoryEconometricsModern\n",
        "- Section 1.5 in @Hansen2022Econometrics\n",
        "\n",
        ":::  \n"
      ],
      "id": "c41c26bd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import geopandas as gpd\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import pycountry\n",
        "\n",
        "BG_COLOR = \"whitesmoke\"\n",
        "FONT_COLOR = \"black\""
      ],
      "id": "0af1dfc6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Load the data\n",
        "unemp_df = pd.read_csv(\"data/europe-unemployment.csv\")\n",
        "\n",
        "# Eurostat uses 2-position codes. For plotting, we need to transform those codes\n",
        "# into ISO-3 codes\n",
        "def iso2_to_iso3(iso2_code):\n",
        "    try:\n",
        "        country = pycountry.countries.get(alpha_2=iso2_code.upper())\n",
        "        return country.alpha_3 if country else None\n",
        "    except KeyError:\n",
        "        return None\n",
        "\n",
        "# Add country codes and set as index\n",
        "unemp_df[\"ISO3_CODE\"] = unemp_df[\"geo\"].apply(iso2_to_iso3)"
      ],
      "id": "2ec19594",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Classifying Data {background=\"#00100F\"}\n",
        "\n",
        "#### How Do We Classify Data?\n",
        "\n",
        "Main kinds of data classification:\n",
        "\n",
        "\n",
        "<br>\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"33%\"}\n",
        "\n",
        "\n",
        "<div style=\"border: 2px solid #ccc; padding: 9px; border-radius: 15px; margin-bottom: 10px;\">\n",
        " \n",
        "Based on number of units and observations per unit  \n",
        "\n",
        "</div>\n",
        "\n",
        "::: \n",
        "\n",
        "::: {.column width=\"30%\"}\n",
        "\n",
        "\n",
        "<div style=\"border: 2px solid #ccc; padding: 9px; border-radius: 15px; margin-bottom: 10px;\">\n",
        " \n",
        "\n",
        "Based on sampling assumptions\n",
        "\n",
        "<br> \n",
        "\n",
        "</div>\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"36%\"}\n",
        "\n",
        "\n",
        "<div style=\"border: 2px solid #ccc; padding: 9px; border-radius: 15px; margin-bottom: 10px;\">\n",
        "\n",
        "<br> \n",
        "\n",
        "By nature of data\n",
        "\n",
        "<br> \n",
        "\n",
        "</div>\n",
        "\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        ". . .\n",
        "\n",
        "All these difference affect identification, estimation, and inference\n",
        "\n",
        "#### Kinds of Data by Observations\n",
        "\n",
        "<br>\n",
        "\n",
        "- Cross-sectional data\n",
        "- Time series\n",
        "- Panel data\n",
        "- Repeated cross-sectional data\n",
        "\n",
        " \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### Sampling Assumptions\n",
        "\n",
        "<br>\n",
        "\n",
        "\n",
        "- From an infinitely large population:\n",
        "  - Independent samples \n",
        "  - Dependent samples (network or spatial dependence)\n",
        "- From a finite population\n",
        "\n",
        " \n",
        "\n",
        "#### Data Nature\n",
        " \n",
        "\n",
        "- Numerical vectors \n",
        "- Images\n",
        "- Text\n",
        "- Functional data \n",
        "\n",
        ". . .\n",
        "\n",
        "<br>\n",
        "\n",
        "In this class mostly numerical data, but other data also hugely important!\n",
        "\n",
        "## Types of Data by Observation {background=\"#00100F\"}\n",
        " \n",
        "\n",
        "\n",
        "  \n",
        "\n",
        "#### Cross-Sectional Data\n",
        "\n",
        "Simplest type of data â€” cross-sectional\n",
        " \n",
        "\n",
        "<div class=\"rounded-box\">\n",
        " \n",
        "::: {.nonincremental}\n",
        "\n",
        "- <span class=\"highlight\">One</span> observation per unit\n",
        "- Time of collection <span class=\"highlight\">not important</span>\n",
        "\n",
        ":::\n",
        "\n",
        "</div>\n",
        "\n",
        "<br>\n",
        "\n",
        "- Example: unemployment in different European countries in the last quarter of 2024\n",
        "- Often indexed by $i$, as in $(Y_i, \\bX_i)$ \n",
        "\n",
        "#### Visual Example: Cross-Sectional Data\n"
      ],
      "id": "5e1e7d9c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Visualizing a cross-section of data\"\n",
        "# Extract data\n",
        "unemp_2024_4 = unemp_df.loc[unemp_df.loc[:, \"date\"]==\"2024-Q4\", :]\n",
        " \n",
        "# Create root choropleth\n",
        "fig = px.choropleth(\n",
        "    unemp_2024_4, \n",
        "    locations=unemp_2024_4[\"ISO3_CODE\"],\n",
        "    locationmode=\"ISO-3\",\n",
        "    color=\"unemp_rate\",\n",
        "    color_continuous_scale=\"Oranges\",\n",
        "    hover_name=\"entity\", \n",
        "    range_color=(0, unemp_2024_4[\"unemp_rate\"].max()), \n",
        ")\n",
        "\n",
        "# Apply dark theme settings\n",
        "fig.update_layout(\n",
        "    font_family=\"Arial\",\n",
        "    plot_bgcolor=BG_COLOR,\n",
        "    paper_bgcolor=BG_COLOR,\n",
        "    font=dict(color=FONT_COLOR),\n",
        "    title=dict(\n",
        "        text=\"<b>European Unemployment Rates (2024 Q4)</b>\",\n",
        "        x=0.03,\n",
        "        xanchor=\"left\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\",\n",
        "        font=dict(color=FONT_COLOR, size=20)\n",
        "    ),\n",
        "    margin=dict(l=20, r=20, t=50, b=20),  # Adjusted for title\n",
        "    coloraxis_colorbar=dict(\n",
        "        title=dict(\n",
        "            text=\"Unemployment Rate (%)\",\n",
        "            font=dict(color=FONT_COLOR, size=12),\n",
        "            side=\"right\"\n",
        "        ),\n",
        "        tickfont=dict(color=FONT_COLOR, size=10),\n",
        "        tickvals=[0, unemp_2024_4[\"unemp_rate\"].max()],\n",
        "        ticktext=[\"0%\", f\"{unemp_2024_4['unemp_rate'].max():.1f}%\"],\n",
        "        len=0.7,\n",
        "        thickness=20,\n",
        "        x=1.02,\n",
        "        yanchor=\"middle\",\n",
        "        y=0.5\n",
        "    ),\n",
        ")\n",
        "\n",
        "# Update geo settings for dark theme\n",
        "fig.update_geos(\n",
        "    visible=False,\n",
        "    center={\"lat\": 50, \"lon\": 10},\n",
        "    projection_scale=5,\n",
        "    bgcolor=BG_COLOR,  # Map background\n",
        "    landcolor=BG_COLOR,  # Land color\n",
        "    lakecolor=BG_COLOR,  # Water color\n",
        "    showocean=True,\n",
        "    oceancolor=\"rgb(237, 237, 237)\", \n",
        "    showcountries=True,\n",
        "    showframe=True, \n",
        "    framecolor=\"black\",\n",
        ")\n",
        "\n",
        " \n",
        "\n",
        "# Custom hover template \n",
        "def custom_hover_text(row):\n",
        "    country_name = row['entity']\n",
        "    unemp_rate = row['unemp_rate']\n",
        "\n",
        "    if unemp_rate == -1:\n",
        "        return f\"<b>{country_name}</b><br>Unemployment: N/A\"\n",
        "    else:\n",
        "        return f\"<b>{country_name}</b><br>Unemployment: {unemp_rate:.1f}%\"\n",
        "\n",
        "# Apply the combined hover text \n",
        "fig.update_traces(\n",
        "    hovertext=[custom_hover_text(row) for _, row in unemp_2024_4.iterrows()],\n",
        "    hoverinfo=\"text\",  # This is the key - only show custom text\n",
        "    hovertemplate=None,  # Explicitly remove default template\n",
        "    marker=dict(line=dict(width=0.5, color='gray'))\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "600ffe8f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Time Series Data\n",
        "\n",
        "Data collected over time:\n",
        "\n",
        "<br>\n",
        "\n",
        "<div class=\"rounded-box\">\n",
        " \n",
        "::: {.nonincremental}\n",
        "\n",
        "<span class=\"highlight\">One</span> unit with <span class=\"highlight\">multiple</span> observations\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "</div>\n",
        "\n",
        "<br>\n",
        "\n",
        "- Example: unemployment in Spain over 1998-2024\n",
        "- Indexed by time $t$: $(Y_t, \\bX_t)$\n",
        "\n",
        "#### Visual Example of Time Series\n"
      ],
      "id": "2dce72a6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Visualizing unemployment in Spain\"\n",
        "# Extract data for Spain\n",
        "unemp_esp = unemp_df.loc[unemp_df[\"ISO3_CODE\"]==\"ESP\", :].copy()\n",
        "unemp_esp ['date'] = pd.PeriodIndex(unemp_esp['date'], freq='Q').to_timestamp() \n",
        "unemp_esp = unemp_esp.sort_values('date')\n",
        "\n",
        "# Add line\n",
        "fig = px.line(\n",
        "    unemp_esp,\n",
        "    x=\"date\",\n",
        "    y=\"unemp_rate\", )\n",
        "\n",
        "# Update syling\n",
        "fig.update_layout(\n",
        "    font_family=\"Arial\",\n",
        "    plot_bgcolor=BG_COLOR,\n",
        "    paper_bgcolor=BG_COLOR,\n",
        "    font=dict(color=FONT_COLOR),\n",
        "    title=dict(\n",
        "        text=\"<b>Unemployment Rate in Spain\\n</b>\",\n",
        "        x=0.07,\n",
        "        xanchor=\"left\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\",\n",
        "        font=dict(color=FONT_COLOR, size=24)\n",
        "    ),\n",
        "    margin=dict(l=20, r=20, t=50, b=20),   \n",
        ")\n",
        "\n",
        "# Set axes\n",
        "fig.update_xaxes(showline=True,\n",
        "        linewidth=3,\n",
        "        linecolor=FONT_COLOR,\n",
        "        mirror=True,\n",
        "        title=dict(\n",
        "            text=\"Date\"\n",
        "        ))\n",
        "\n",
        "fig.update_yaxes(showline=True,\n",
        "         linewidth=3,\n",
        "         linecolor=FONT_COLOR,\n",
        "         mirror=True,\n",
        "         title=dict(\n",
        "            text=\"Unemployment Rate, %\"\n",
        "         )\n",
        "         )\n",
        "\n",
        "# Correct hover text\n",
        "fig.update_traces(\n",
        "    line=dict(color=\"rgb(0, 138, 165)\"),\n",
        "    hovertemplate=None,\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "b1427fea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Panel Data\n",
        "\n",
        "Multidimensional kind of data: \n",
        "\n",
        "<br> \n",
        "\n",
        "<div class=\"rounded-box\">\n",
        " \n",
        "\n",
        "::: {.nonincremental}\n",
        "\n",
        "<span class=\"highlight\">Multiple</span> units with <span class=\"highlight\">multiple</span> observations\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "</div>\n",
        "\n",
        "\n",
        "<br> \n",
        "\n",
        "- Sometimes but not always â€” combination of cross-sections and time series\n",
        "- Can be two- $(Y_{it})$ or higher-dimensional $(Y_{ijt})$\n",
        "\n",
        "\n",
        "#### Panel Data Examples\n",
        "\n",
        "<br>\n",
        "\n",
        "- Two-dimensional:\n",
        "  - Unit $\\times$ time: unemployment in European country $i$ over years $t$\n",
        "  - Various groups: grades of student $i$ under teacher $j$\n",
        "- Higher-dimensional: price of beer $i$ in store $j$ on day $t$ \n",
        " \n",
        " \n",
        "\n",
        "#### Visual Example: Panel Data\n"
      ],
      "id": "7b1afca3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Rectangularizing the data\"\n",
        "# Get all unique values\n",
        "countries = unemp_df[\"ISO3_CODE\"].unique()\n",
        "dates = unemp_df[\"date\"].unique()\n",
        "# Create a dictionary of code: country name pairs\n",
        "countries_dict= (\n",
        "    unemp_df.loc[:, [\"ISO3_CODE\", \"entity\"]]\n",
        "    .drop_duplicates()\n",
        "    .set_index(\"ISO3_CODE\")\n",
        "    .to_dict()['entity']\n",
        ")\n",
        "\n",
        "# Create full index using Cartesian product\n",
        "full_index = pd.MultiIndex.from_product([countries, dates], names=[\"ISO3_CODE\", \"date\"])\n",
        "\n",
        "# Reindex dataframe to ensure all combinations exist\n",
        "unemp_df = (\n",
        "    unemp_df.set_index([\"ISO3_CODE\", \"date\"])\n",
        "    .reindex(full_index)\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "# Fill missing unemployment and country name values\n",
        "unemp_df[\"unemp_rate\"] = unemp_df[\"unemp_rate\"].fillna(-1)   \n",
        "unemp_df[\"entity\"] = (\n",
        "    unemp_df.set_index(\"ISO3_CODE\")[\"entity\"]\n",
        "    .fillna(countries_dict)\n",
        "    .reset_index()[\"entity\"]    \n",
        ")"
      ],
      "id": "f1b2be34",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Visualizing the panel nature of the data\"\n",
        "# Convert time column to proper datetime format\n",
        "\n",
        "unemp_df = unemp_df.sort_values(by=\"date\")\n",
        " \n",
        "color_scale = [\n",
        "    [0.0, \"rgb(44, 44, 44)\"],  # Missing data\n",
        "    [0.0001, \"rgb(255, 221, 192)\"],   \n",
        "    [1.0, \"rgb(255, 124, 9)\"]   \n",
        "]\n",
        "\n",
        "# Create figure with dark theme\n",
        "fig = px.choropleth(\n",
        "    unemp_df, \n",
        "    locationmode = \"ISO-3\",\n",
        "    locations=unemp_df[\"ISO3_CODE\"],\n",
        "    color=\"unemp_rate\",\n",
        "    color_continuous_scale=color_scale,\n",
        "    hover_name=\"entity\", \n",
        "    animation_frame=\"date\", \n",
        "    range_color=(-1, 25), \n",
        ")\n",
        " \n",
        "\n",
        "# Custom hover template function\n",
        "def custom_hover_text(row):\n",
        "    country_name = row['entity']\n",
        "    unemp_rate = row['unemp_rate']\n",
        "    date = row['date'].strftime('%Y-Q%q') if hasattr(row['date'], 'strftime') else str(row['date'])\n",
        "\n",
        "    if unemp_rate == -1:\n",
        "        return f\"<b>{country_name}</b><br>{date}<br>Unemployment: N/A\"\n",
        "    else:\n",
        "        return f\"<b>{country_name}</b><br>{date}<br>Unemployment: {unemp_rate:.1f}%\"\n",
        "\n",
        "# Apply custom hover formatting to ALL frames\n",
        "for frame in fig.frames:\n",
        "    # Get the data for this frame\n",
        "    frame_data = frame.data[0]\n",
        "    # Find the corresponding data in unemp_df\n",
        "    quarter = frame.name\n",
        "    quarter_df = unemp_df[unemp_df['date'] == quarter]\n",
        "    # Update hover text for this frame\n",
        "    frame_data.hovertext = [custom_hover_text(row) for _, row in quarter_df.iterrows()]\n",
        "    frame_data.hoverinfo = \"text\"\n",
        "    frame.data[0].hovertemplate=None\n",
        "\n",
        "fig.data[0].hovertext = [custom_hover_text(row) for _, row in unemp_df[unemp_df['date'] == unemp_df['date'].min()].iterrows()]\n",
        "fig.data[0].hoverinfo = \"text\"\n",
        "fig.data[0].hovertemplate = None\n",
        "\n",
        "# Apply dark theme settings\n",
        "fig.update_layout(\n",
        "    font_family=\"Arial\",\n",
        "    plot_bgcolor=BG_COLOR,\n",
        "    paper_bgcolor=BG_COLOR,\n",
        "    font=dict(color=FONT_COLOR),\n",
        "    title=dict(\n",
        "        text=\"<b>European Unemployment Rates: Evolution 1998-2024</b>\",\n",
        "        x=0.03,\n",
        "        xanchor=\"left\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\",\n",
        "        font=dict(color=FONT_COLOR, size=20)\n",
        "    ),\n",
        "    margin=dict(l=20, r=20, t=50, b=20),  # Adjusted for title\n",
        "    coloraxis_colorbar=dict(\n",
        "        title=dict(\n",
        "            text=\"Unemployment Rate (%)\",\n",
        "            font=dict(color=FONT_COLOR, size=12),\n",
        "            side=\"right\"\n",
        "        ),\n",
        "        tickfont=dict(color=FONT_COLOR, size=10),\n",
        "        tickvals=[0, 25],\n",
        "        ticktext=[\"0%\", \"25%+\"],\n",
        "        len=0.7,\n",
        "        thickness=20,\n",
        "        x=1.02,\n",
        "        yanchor=\"middle\",\n",
        "        y=0.5\n",
        "    ),\n",
        "    updatemenus=[\n",
        "        dict(\n",
        "            type=\"buttons\", \n",
        "            buttons=[\n",
        "                dict(label=\"Play\",\n",
        "                     method=\"animate\",\n",
        "                     args=[None, {\"frame\": {\"duration\": 500, \"redraw\": True}, \"fromcurrent\": True}]\n",
        "                     ),\n",
        "                dict(label=\"Pause\",\n",
        "                     method=\"animate\",\n",
        "                     args=[[None], {\"frame\": {\"duration\": 0, \"redraw\": False}, \"mode\": \"immediate\"}]\n",
        "                     )\n",
        "            ]\n",
        "        )\n",
        "    ],\n",
        "    annotations=[dict(\n",
        "        text=\"Quarter\", \n",
        "        x=0.5, \n",
        "        y=-0.27,  # Positioning below the slider\n",
        "        showarrow=False,\n",
        "        font_size=14\n",
        "    )],\n",
        ")\n",
        "\n",
        "# Update geo settings for dark theme\n",
        "fig.update_geos(\n",
        "    visible=False,\n",
        "    center={\"lat\": 50, \"lon\": 10},\n",
        "    projection_scale=5,\n",
        "    bgcolor=BG_COLOR,  # Map background\n",
        "    landcolor=BG_COLOR,  # Land color\n",
        "    lakecolor=BG_COLOR,  # Water color\n",
        "    showocean=True,\n",
        "    oceancolor=\"rgb(222, 222, 222)\", \n",
        "    showcountries=True,\n",
        "    showframe=True, \n",
        "    framecolor=\"black\",\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "f452a3b1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Repeated Cross-Sectional Data\n",
        " \n",
        " \n",
        "<div class=\"rounded-box\">\n",
        " \n",
        "::: {.nonincremental}\n",
        "\n",
        "- One observation per unit\n",
        "- Time of collection <span class=\"highlight\">important</span>\n",
        "\n",
        ":::\n",
        "\n",
        "</div>\n",
        "\n",
        "\n",
        "<br> \n",
        "\n",
        "\n",
        "Example\n",
        "\n",
        "- Surveying different households in different years\n",
        "- Changes over time cannot be ignored in many contexts\n",
        "\n",
        "#### Data with Panel and Repeated Cross-Sectional Features\n",
        "\n",
        "<br> \n",
        "\n",
        "<div class=\"rounded-box\">\n",
        "<span class=\"highlight\">Rotating panels</span> have features of both panel and repeated cross-sectional data\n",
        "\n",
        "</div> \n",
        " \n",
        "\n",
        "#### Example of Rotating Panel\n",
        "\n",
        "Example: US consumer expenditure survey (quarterly)\n",
        "\n",
        "- Each household asked about their spending for four consecutive quarters, then dropped\n",
        "- Each quarter new 2500 households recruited into survey\n",
        "  - 2014 and 2016: totally different households\n",
        "  - 2014Q1 and 2014Q2: 7500 households in common, 2500 only in one of the two datasets\n",
        "\n",
        "::: footer\n",
        "\n",
        "Read more about CES [here](https://www.bls.gov/cex/)\n",
        "\n",
        ":::\n",
        "\n",
        "## Recap and Conclusions {background=\"#00100F\"}\n",
        "\n",
        "#### Recap\n",
        "\n",
        "In this lecture we\n",
        "\n",
        "1. Discussed approaches to classifying data\n",
        "2. Discussed the four main kinds of data in terms of observation structure\n",
        "   \n",
        "#### References {.allowframebreaks visibility=\"uncounted\"}\n",
        "\n",
        "::: {#refs}\n",
        ":::"
      ],
      "id": "eb8f7e64"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\moren\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}