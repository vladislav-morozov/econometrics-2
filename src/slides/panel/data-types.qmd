---
title: "Data Types"
subtitle: "A Brief Classification"
author: Vladislav Morozov  
format:
  revealjs:
    width: 1150
    slide-number: true
    sc-sb-title: true
    incremental: true   
    logo: ../../themes/favicon.ico
    footer: "Classification of Data Types"
    footer-logo-link: "https://vladislav-morozov.github.io/econometrics-2/"
    theme: ../../themes/slides_theme.scss
    toc: TRUE
    toc-depth: 2
    toc-title: Contents
    transition: convex
    transition-speed: fast
slide-level: 4
title-slide-attributes:
    data-background-color: "#045D5D"
    data-footer: " "
filters:
  - reveal-header  
include-in-header: ../../themes/mathjax.html 
highlight-style: tango
---

## Introduction {background="#00100F"}
  
### Lecture Info {background="#43464B" visibility="uncounted"}


#### Learning Outcomes

This lecture offers a brief classification of data types


<br>

By the end, you should be able to

- State the main ways to we classify data
- Describe the four main kinds data in terms of observations
  
#### Textbook References
 

::: {.nonincremental}


- Section 1.3 in @Wooldridge2020IntroductoryEconometricsModern
- Section 1.5 in @Hansen2022Econometrics

:::  


```{python} 
import geopandas as gpd
import pandas as pd
import plotly.express as px
import pycountry

BG_COLOR = "whitesmoke"
FONT_COLOR = "black"
```



```{python}

# Load the data
unemp_df = pd.read_csv("data/europe-unemployment.csv")

# Eurostat uses 2-position codes. For plotting, we need to transform those codes
# into ISO-3 codes
def iso2_to_iso3(iso2_code):
    try:
        country = pycountry.countries.get(alpha_2=iso2_code.upper())
        return country.alpha_3 if country else None
    except KeyError:
        return None

# Add country codes and set as index
unemp_df["ISO3_CODE"] = unemp_df["geo"].apply(iso2_to_iso3)
```


## Classifying Data {background="#00100F"}

#### How Do We Classify Data?

Main kinds of data classification:


<br>


:::: {.columns}

::: {.column width="33%"}


<div style="border: 2px solid #ccc; padding: 9px; border-radius: 15px; margin-bottom: 10px;">
 
Based on number of units and observations per unit  

</div>

::: 

::: {.column width="30%"}


<div style="border: 2px solid #ccc; padding: 9px; border-radius: 15px; margin-bottom: 10px;">
 

Based on sampling assumptions

<br> 

</div>

:::

::: {.column width="36%"}


<div style="border: 2px solid #ccc; padding: 9px; border-radius: 15px; margin-bottom: 10px;">

<br> 

By nature of data

<br> 

</div>

:::

::::

. . .

All these difference affect identification, estimation, and inference

#### Kinds of Data by Observations

<br>

- Cross-sectional data
- Time series
- Panel data
- Repeated cross-sectional data

 




#### Sampling Assumptions

<br>


- From an infinitely large population:
  - Independent samples 
  - Dependent samples (network or spatial dependence)
- From a finite population

 

#### Data Nature
 

- Numerical vectors 
- Images
- Text
- Functional data 

. . .

<br>

In this class mostly numerical data, but other data also hugely important!

## Types of Data by Observation {background="#00100F"}
 


  

#### Cross-Sectional Data

Simplest type of data — cross-sectional
 

<div class="rounded-box">
 
::: {.nonincremental}

- <span class="highlight">One</span> observation per unit
- Time of collection <span class="highlight">not important</span>

:::

</div>

<br>

- Example: unemployment in different European countries in the last quarter of 2024
- Often indexed by $i$, as in $(Y_i, \bX_i)$ 

#### Visual Example: Cross-Sectional Data

```{python}
 
#| code-fold: true
#| code-summary: "Visualizing a cross-section of data"
# Extract data
unemp_2024_4 = unemp_df.loc[unemp_df.loc[:, "date"]=="2024-Q4", :]
 
# Create root choropleth
fig = px.choropleth(
    unemp_2024_4, 
    locations=unemp_2024_4["ISO3_CODE"],
    locationmode="ISO-3",
    color="unemp_rate",
    color_continuous_scale="Oranges",
    hover_name="entity", 
    range_color=(0, unemp_2024_4["unemp_rate"].max()), 
)

# Apply dark theme settings
fig.update_layout(
    font_family="Arial",
    plot_bgcolor=BG_COLOR,
    paper_bgcolor=BG_COLOR,
    font=dict(color=FONT_COLOR),
    title=dict(
        text="<b>European Unemployment Rates (2024 Q4)</b>",
        x=0.03,
        xanchor="left",
        y=0.95,
        yanchor="top",
        font=dict(color=FONT_COLOR, size=20)
    ),
    margin=dict(l=20, r=20, t=50, b=20),  # Adjusted for title
    coloraxis_colorbar=dict(
        title=dict(
            text="Unemployment Rate (%)",
            font=dict(color=FONT_COLOR, size=12),
            side="right"
        ),
        tickfont=dict(color=FONT_COLOR, size=10),
        tickvals=[0, unemp_2024_4["unemp_rate"].max()],
        ticktext=["0%", f"{unemp_2024_4['unemp_rate'].max():.1f}%"],
        len=0.7,
        thickness=20,
        x=1.02,
        yanchor="middle",
        y=0.5
    ),
)

# Update geo settings for dark theme
fig.update_geos(
    visible=False,
    center={"lat": 50, "lon": 10},
    projection_scale=5,
    bgcolor=BG_COLOR,  # Map background
    landcolor=BG_COLOR,  # Land color
    lakecolor=BG_COLOR,  # Water color
    showocean=True,
    oceancolor="rgb(237, 237, 237)", 
    showcountries=True,
    showframe=True, 
    framecolor="black",
)

 

# Custom hover template 
def custom_hover_text(row):
    country_name = row['entity']
    unemp_rate = row['unemp_rate']

    if unemp_rate == -1:
        return f"<b>{country_name}</b><br>Unemployment: N/A"
    else:
        return f"<b>{country_name}</b><br>Unemployment: {unemp_rate:.1f}%"

# Apply the combined hover text 
fig.update_traces(
    hovertext=[custom_hover_text(row) for _, row in unemp_2024_4.iterrows()],
    hoverinfo="text",  # This is the key - only show custom text
    hovertemplate=None,  # Explicitly remove default template
    marker=dict(line=dict(width=0.5, color='gray'))
)

fig.show()
```



#### Time Series Data

Data collected over time:

<br>

<div class="rounded-box">
 
::: {.nonincremental}

<span class="highlight">One</span> unit with <span class="highlight">multiple</span> observations


:::

</div>

<br>

- Example: unemployment in Spain over 1998-2024
- Indexed by time $t$: $(Y_t, \bX_t)$

#### Visual Example of Time Series

```{python}
#| code-fold: true
#| code-summary: "Visualizing unemployment in Spain"
# Extract data for Spain
unemp_esp = unemp_df.loc[unemp_df["ISO3_CODE"]=="ESP", :].copy()
unemp_esp ['date'] = pd.PeriodIndex(unemp_esp['date'], freq='Q').to_timestamp() 
unemp_esp = unemp_esp.sort_values('date')

# Add line
fig = px.line(
    unemp_esp,
    x="date",
    y="unemp_rate", )

# Update syling
fig.update_layout(
    font_family="Arial",
    plot_bgcolor=BG_COLOR,
    paper_bgcolor=BG_COLOR,
    font=dict(color=FONT_COLOR),
    title=dict(
        text="<b>Unemployment Rate in Spain\n</b>",
        x=0.07,
        xanchor="left",
        y=0.95,
        yanchor="top",
        font=dict(color=FONT_COLOR, size=24)
    ),
    margin=dict(l=20, r=20, t=50, b=20),   
)

# Set axes
fig.update_xaxes(showline=True,
        linewidth=3,
        linecolor=FONT_COLOR,
        mirror=True,
        title=dict(
            text="Date"
        ))

fig.update_yaxes(showline=True,
         linewidth=3,
         linecolor=FONT_COLOR,
         mirror=True,
         title=dict(
            text="Unemployment Rate, %"
         )
         )

# Correct hover text
fig.update_traces(
    line=dict(color="rgb(0, 138, 165)"),
    hovertemplate=None,
)

fig.show()
``` 


#### Panel Data

Multidimensional kind of data: 

<br> 

<div class="rounded-box">
 

::: {.nonincremental}

<span class="highlight">Multiple</span> units with <span class="highlight">multiple</span> observations


:::

</div>


<br> 

- Sometimes but not always — combination of cross-sections and time series
- Can be two- $(Y_{it})$ or higher-dimensional $(Y_{ijt})$


#### Panel Data Examples

<br>

- Two-dimensional:
  - Unit $\times$ time: unemployment in European country $i$ over years $t$
  - Various groups: grades of student $i$ under teacher $j$
- Higher-dimensional: price of beer $i$ in store $j$ on day $t$ 
 
 

#### Visual Example: Panel Data

```{python}
#| code-fold: true
#| code-summary: "Rectangularizing the data"
# Get all unique values
countries = unemp_df["ISO3_CODE"].unique()
dates = unemp_df["date"].unique()
# Create a dictionary of code: country name pairs
countries_dict= (
    unemp_df.loc[:, ["ISO3_CODE", "entity"]]
    .drop_duplicates()
    .set_index("ISO3_CODE")
    .to_dict()['entity']
)

# Create full index using Cartesian product
full_index = pd.MultiIndex.from_product([countries, dates], names=["ISO3_CODE", "date"])

# Reindex dataframe to ensure all combinations exist
unemp_df = (
    unemp_df.set_index(["ISO3_CODE", "date"])
    .reindex(full_index)
    .reset_index()
)

# Fill missing unemployment and country name values
unemp_df["unemp_rate"] = unemp_df["unemp_rate"].fillna(-1)   
unemp_df["entity"] = (
    unemp_df.set_index("ISO3_CODE")["entity"]
    .fillna(countries_dict)
    .reset_index()["entity"]    
)
```

```{python} 
#| code-fold: true
#| code-summary: "Visualizing the panel nature of the data"
# Convert time column to proper datetime format

unemp_df = unemp_df.sort_values(by="date")
 
color_scale = [
    [0.0, "rgb(44, 44, 44)"],  # Missing data
    [0.0001, "rgb(255, 221, 192)"],   
    [1.0, "rgb(255, 124, 9)"]   
]

# Create figure with dark theme
fig = px.choropleth(
    unemp_df, 
    locationmode = "ISO-3",
    locations=unemp_df["ISO3_CODE"],
    color="unemp_rate",
    color_continuous_scale=color_scale,
    hover_name="entity", 
    animation_frame="date", 
    range_color=(-1, 25), 
)
 

# Custom hover template function
def custom_hover_text(row):
    country_name = row['entity']
    unemp_rate = row['unemp_rate']
    date = row['date'].strftime('%Y-Q%q') if hasattr(row['date'], 'strftime') else str(row['date'])

    if unemp_rate == -1:
        return f"<b>{country_name}</b><br>{date}<br>Unemployment: N/A"
    else:
        return f"<b>{country_name}</b><br>{date}<br>Unemployment: {unemp_rate:.1f}%"

# Apply custom hover formatting to ALL frames
for frame in fig.frames:
    # Get the data for this frame
    frame_data = frame.data[0]
    # Find the corresponding data in unemp_df
    quarter = frame.name
    quarter_df = unemp_df[unemp_df['date'] == quarter]
    # Update hover text for this frame
    frame_data.hovertext = [custom_hover_text(row) for _, row in quarter_df.iterrows()]
    frame_data.hoverinfo = "text"
    frame.data[0].hovertemplate=None

fig.data[0].hovertext = [custom_hover_text(row) for _, row in unemp_df[unemp_df['date'] == unemp_df['date'].min()].iterrows()]
fig.data[0].hoverinfo = "text"
fig.data[0].hovertemplate = None

# Apply dark theme settings
fig.update_layout(
    font_family="Arial",
    plot_bgcolor=BG_COLOR,
    paper_bgcolor=BG_COLOR,
    font=dict(color=FONT_COLOR),
    title=dict(
        text="<b>European Unemployment Rates: Evolution 1998-2024</b>",
        x=0.03,
        xanchor="left",
        y=0.95,
        yanchor="top",
        font=dict(color=FONT_COLOR, size=20)
    ),
    margin=dict(l=20, r=20, t=50, b=20),  # Adjusted for title
    coloraxis_colorbar=dict(
        title=dict(
            text="Unemployment Rate (%)",
            font=dict(color=FONT_COLOR, size=12),
            side="right"
        ),
        tickfont=dict(color=FONT_COLOR, size=10),
        tickvals=[0, 25],
        ticktext=["0%", "25%+"],
        len=0.7,
        thickness=20,
        x=1.02,
        yanchor="middle",
        y=0.5
    ),
    updatemenus=[
        dict(
            type="buttons", 
            buttons=[
                dict(label="Play",
                     method="animate",
                     args=[None, {"frame": {"duration": 500, "redraw": True}, "fromcurrent": True}]
                     ),
                dict(label="Pause",
                     method="animate",
                     args=[[None], {"frame": {"duration": 0, "redraw": False}, "mode": "immediate"}]
                     )
            ]
        )
    ],
    annotations=[dict(
        text="Quarter", 
        x=0.5, 
        y=-0.27,  # Positioning below the slider
        showarrow=False,
        font_size=14
    )],
)

# Update geo settings for dark theme
fig.update_geos(
    visible=False,
    center={"lat": 50, "lon": 10},
    projection_scale=5,
    bgcolor=BG_COLOR,  # Map background
    landcolor=BG_COLOR,  # Land color
    lakecolor=BG_COLOR,  # Water color
    showocean=True,
    oceancolor="rgb(222, 222, 222)", 
    showcountries=True,
    showframe=True, 
    framecolor="black",
)

fig.show()
```
 
#### Repeated Cross-Sectional Data
 
 
<div class="rounded-box">
 
::: {.nonincremental}

- One observation per unit
- Time of collection <span class="highlight">important</span>

:::

</div>


<br> 


Example

- Surveying different households in different years
- Changes over time cannot be ignored in many contexts

#### Data with Panel and Repeated Cross-Sectional Features

<br> 

<div class="rounded-box">
<span class="highlight">Rotating panels</span> have features of both panel and repeated cross-sectional data

</div> 
 

#### Example of Rotating Panel

Example: US consumer expenditure survey (quarterly)

- Each household asked about their spending for four consecutive quarters, then dropped
- Each quarter new 2500 households recruited into survey
  - 2014 and 2016: totally different households
  - 2014Q1 and 2014Q2: 7500 households in common, 2500 only in one of the two datasets

::: footer

Read more about CES [here](https://www.bls.gov/cex/)

:::

## Recap and Conclusions {background="#00100F"}

#### Recap

In this lecture we

1. Discussed approaches to classifying data
2. Discussed the four main kinds of data in terms of observation structure
   
#### References {.allowframebreaks visibility="uncounted"}

::: {#refs}
:::